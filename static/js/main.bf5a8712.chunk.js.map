{"version":3,"sources":["logo.svg","Card.js","Deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","this","props","name","img","id","src","alt","Component","API_BASE_URL","Deck","state","deck","drawn","handleClick","bind","a","deckUrl","axios","get","response","deckId","data","deck_id","setState","cardUrl","cards","length","Error","success","card","image","suit","value","code","st","alert","e","drawNewCard","map","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAAe,I,iGCETA,E,4JACJ,WACE,MAA0BC,KAAKC,MAAvBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,GACnB,OACE,gCACE,kCAAKA,KACL,qBAAKC,IAAG,UAAKF,GAAOG,IAAG,UAAKJ,Y,GANjBK,aAYJR,ICXTS,EAAe,uCACfC,E,kDACJ,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CAAEC,KAAM,GAAIC,MAAO,IAChC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,4FAKnB,gCAAAC,EAAA,6DACMC,EADN,UACmBR,EADnB,yBAEuBS,IAAMC,IAAIF,GAFjC,OAEMG,EAFN,OAGMC,EAASD,EAASE,KAAKC,QAC3BtB,KAAKuB,SAAS,CAAEZ,KAAMS,IAJxB,gD,sHAMA,wCAAAL,EAAA,6DACMS,EADN,UACmBhB,GADnB,OACkCR,KAAKU,MAAMC,KAD7C,4BAGyBM,IAAMC,IAAIM,GAHnC,UAIuC,KAD/BL,EAHR,QAIiBE,KAAKI,MAAMC,OAJ5B,sBAKY,IAAIC,MAAM,qBALtB,UAMgBR,EAASE,KAAKO,QAN9B,uBAOY,IAAID,MAAM,wBAPtB,QASQE,EAAOV,EAASE,KAAKI,MAAM,GACzBK,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,MAAOC,EAASJ,EAATI,KAC1BjC,KAAKuB,UAAS,SAACW,GAAD,MAAS,CACrBtB,MAAM,GAAD,mBACAsB,EAAGtB,OADH,CAEH,CAAER,GAAI6B,EAAM9B,IAAK2B,EAAO5B,KAAK,GAAD,OAAK8B,EAAL,eAAiBD,EAAjB,YAdpC,kDAkBII,MAAM,EAAD,IAlBT,0D,+EAqBA,SAAYC,GACVpC,KAAKqC,gB,oBAEP,WACE,IAAMZ,EAAQzB,KAAKU,MAAME,MAAM0B,KAAI,SAACT,GAAD,OACjC,cAAC,EAAD,CAAoB3B,KAAM2B,EAAK3B,KAAMC,IAAK0B,EAAK1B,IAAKC,GAAIyB,EAAKzB,IAAlDyB,EAAKzB,OAElB,OACE,gCACGqB,EAED,wBAAQc,QAASvC,KAAKa,YAAtB,kC,GA5CWN,aAkDJE,IC3CA+B,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bf5a8712.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\n\nclass Card extends Component {\n  render() {\n    const { name, img, id } = this.props;\n    return (\n      <div>\n        <p> {id}</p>\n        <img src={`${img}`} alt={`${name}`} />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./Card\";\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck/\";\nclass Deck extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { deck: \"\", drawn: [] };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  async componentDidMount() {\n    let deckUrl = `${API_BASE_URL}new/shuffle/`;\n    let response = await axios.get(deckUrl);\n    let deckId = response.data.deck_id;\n    this.setState({ deck: deckId });\n  }\n  async drawNewCard() {\n    let cardUrl = `${API_BASE_URL}${this.state.deck}/draw/`;\n    try {\n      let response = await axios.get(cardUrl);\n      if (response.data.cards.length === 0) {\n        throw new Error(\"No card remaining\");\n      } else if (!response.data.success) {\n        throw new Error(\"Something went wrong\");\n      }\n      let card = response.data.cards[0];\n      let { image, suit, value, code } = card;\n      this.setState((st) => ({\n        drawn: [\n          ...st.drawn,\n          { id: code, img: image, name: `${value} of ${suit} ` },\n        ],\n      }));\n    } catch (err) {\n      alert(err);\n    }\n  }\n  handleClick(e) {\n    this.drawNewCard();\n  }\n  render() {\n    const cards = this.state.drawn.map((card) => (\n      <Card key={card.id} name={card.name} img={card.img} id={card.id} />\n    ));\n    return (\n      <div>\n        {cards}\n\n        <button onClick={this.handleClick}>Draw new card</button>\n      </div>\n    );\n  }\n}\n\nexport default Deck;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Deck from \"./Deck\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}