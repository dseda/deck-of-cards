{"version":3,"sources":["logo.svg","Card.js","Deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","angle","Math","random","xPos","yPos","_transform","console","log","this","name","img","id","className","style","transform","src","alt","Component","API_BASE_URL","Deck","state","deck","drawn","handleClick","bind","a","deckUrl","axios","get","response","deckId","data","deck_id","setState","cardUrl","cards","length","Error","success","card","image","suit","value","code","st","alert","e","drawNewCard","map","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAAe,I,yGC2BAA,E,kDAxBb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJf,OAKjB,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALiB,E,0CAOnB,WAEEM,QAAQC,IAAIC,KAAKH,YACjB,MAA0BG,KAAKT,MAAvBU,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAd,EAAmBC,GACnB,OACE,qBAAKC,UAAU,OAAf,SAEE,qBACEC,MAAO,CAAEC,UAAWN,KAAKH,YACzBU,IAAG,UAAKL,GACRM,IAAG,UAAKP,W,GAlBCQ,aCEbC,G,MAAe,wCACfC,E,kDACJ,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CAAEC,KAAM,GAAIC,MAAO,IAChC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,4FAKnB,gCAAAC,EAAA,6DACMC,EADN,UACmBR,EADnB,yBAEuBS,IAAMC,IAAIF,GAFjC,OAEMG,EAFN,OAGMC,EAASD,EAASE,KAAKC,QAC3BxB,KAAKyB,SAAS,CAAEZ,KAAMS,IAJxB,gD,sHAMA,wCAAAL,EAAA,6DACMS,EADN,UACmBhB,GADnB,OACkCV,KAAKY,MAAMC,KAD7C,4BAGyBM,IAAMC,IAAIM,GAHnC,UAIuC,KAD/BL,EAHR,QAIiBE,KAAKI,MAAMC,OAJ5B,sBAKY,IAAIC,MAAM,qBALtB,UAMgBR,EAASE,KAAKO,QAN9B,uBAOY,IAAID,MAAM,wBAPtB,QASQE,EAAOV,EAASE,KAAKI,MAAM,GACzBK,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,MAAOC,EAASJ,EAATI,KAC1BnC,KAAKyB,UAAS,SAACW,GAAD,MAAS,CACrBtB,MAAM,GAAD,mBACAsB,EAAGtB,OADH,CAEH,CAAEX,GAAIgC,EAAMjC,IAAK8B,EAAO/B,KAAK,GAAD,OAAKiC,EAAL,eAAiBD,EAAjB,YAdpC,kDAkBII,MAAM,EAAD,IAlBT,0D,+EAqBA,SAAYC,GACVtC,KAAKuC,gB,oBAEP,WACE,IAAMZ,EAAQ3B,KAAKY,MAAME,MAAM0B,KAAI,SAACT,GAAD,OACjC,cAAC,EAAD,CAAoB9B,KAAM8B,EAAK9B,KAAMC,IAAK6B,EAAK7B,IAAKC,GAAI4B,EAAK5B,IAAlD4B,EAAK5B,OAElB,OACE,sBAAKC,UAAU,OAAf,UACE,oBAAIA,UAAU,aAAd,yBACA,wBAAQqC,QAASzC,KAAKe,YAAtB,2BACA,qBAAKX,UAAU,QAAf,SAAwBuB,W,GA5CblB,aAkDJE,IC5CA+B,MARf,WACE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.733a412b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport \"./Card.css\";\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    let angle = Math.random() * 90 - 45;\n    let xPos = Math.random() * 40 - 20;\n    let yPos = Math.random() * 40 - 20;\n    this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\n  }\n  render() {\n    /* transform: translate(10px, 20px) rotate(20deg); */\n    console.log(this._transform);\n    const { name, img, id } = this.props;\n    return (\n      <div className=\"Card\">\n        {/* <p> {id}</p> */}\n        <img\n          style={{ transform: this._transform }}\n          src={`${img}`}\n          alt={`${name}`}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./Card\";\nimport \"./Deck.css\";\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck/\";\nclass Deck extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { deck: \"\", drawn: [] };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  async componentDidMount() {\n    let deckUrl = `${API_BASE_URL}new/shuffle/`;\n    let response = await axios.get(deckUrl);\n    let deckId = response.data.deck_id;\n    this.setState({ deck: deckId });\n  }\n  async drawNewCard() {\n    let cardUrl = `${API_BASE_URL}${this.state.deck}/draw/`;\n    try {\n      let response = await axios.get(cardUrl);\n      if (response.data.cards.length === 0) {\n        throw new Error(\"No card remaining\");\n      } else if (!response.data.success) {\n        throw new Error(\"Something went wrong\");\n      }\n      let card = response.data.cards[0];\n      let { image, suit, value, code } = card;\n      this.setState((st) => ({\n        drawn: [\n          ...st.drawn,\n          { id: code, img: image, name: `${value} of ${suit} ` },\n        ],\n      }));\n    } catch (err) {\n      alert(err);\n    }\n  }\n  handleClick(e) {\n    this.drawNewCard();\n  }\n  render() {\n    const cards = this.state.drawn.map((card) => (\n      <Card key={card.id} name={card.name} img={card.img} id={card.id} />\n    ));\n    return (\n      <div className=\"Deck\">\n        <h1 className=\"deck-title\">Card dealer</h1>\n        <button onClick={this.handleClick}>Draw new card</button>\n        <div className=\"Cards\">{cards}</div>\n      </div>\n    );\n  }\n}\n\nexport default Deck;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Deck from \"./Deck\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}